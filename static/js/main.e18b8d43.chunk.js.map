{"version":3,"sources":["containers/MemoryBlocks/constants.js","containers/MemoryBlocks/Styled.js","containers/MemoryBlocks/components/Block/Styled.js","containers/MemoryBlocks/components/Block/index.js","containers/MemoryBlocks/components/Progress/Styled.js","containers/MemoryBlocks/components/Progress/index.js","containers/MemoryBlocks/selectors.js","containers/MemoryBlocks/utils.js","utils/tracking.js","containers/MemoryBlocks/index.js","containers/MemoryBlocks/actions.js","App.js","serviceWorker.js","containers/MemoryBlocks/reducer.js","store/index.js","store/configureStore.js","store/reducers.js","index.js"],"names":["SET_INIT","concat","UPDATE_ANSWER","UPDATE_IS_COMPLETE","UPDATE_IS_CORRECT","SET_RESTART_GAME","SET_REPLAY_SOUND","SET_IS_PLAYING","DEFAULT_SIDE_LENGTH","MAX_SIDE_LENGTH","LEVEL_SET","DEFAULT_LEVEL","SOUND_EFFECT","correct","wrong","BLOCK_COLORS","PIANO_SOUNDS_URL","PIANO_SOUNDS","CHORD","map","note","Audio","StyledMemoryBlocks","styled","div","_templateObject","props","sideLength","StyledBlock","_templateObject2","id","blockId","keyframes","Styled_templateObject","Math","random","RED","Block","_this$props","this","handleOnClick","react_default","a","createElement","data-id","className","onClick","React","PureComponent","defaultProps","StyledProgress","Progress_Styled_templateObject","Progress","_ref","levelData","answer","progressNode","Array","from","size","value","index","node","key","List","selectMemoryBlocks","state","get","playSoundEffect","type","forEach","audioObject","currentTime","play","playLevelSound","blocks","setTimeout","getIn","toString","flashBlock","isCorrect","blockActiveColor","document","getElementById","classList","add","remove","flashAllBlocks","block","generateLevelData","level","maxNote","numOfNote","floor","clearAllTimeouts","biggestTimeoutId","window","i","clearTimeout","dataLayer","gtag","push","arguments","Date","MemoryBlocks","handleOnBlockClick","event","_this","isPlaying","handleUpdateAnswer","target","getAttribute","parseInt","handleOnGameStart","_this$props2","handleSetInit","handleSetIsPlaying","finishedTime","handleOnGameRestart","handleSetGameRestart","handleOnReplaySound","_this$props3","chance","handleSetReplaySound","prevProps","prevState","_this$props4","isComplete","handleUpdateIsComplete","handleUpdateIsCorrect","_this2","_this$props5","isGameStart","components_Block","components_Progress","Component","mapStateToProps","createStructuredSelector","createSelector","tictactoeState","connect","dispatch","payload","updateAnswer","updateIsComplete","updateIsCorrect","setIsPlaying","App","containers_MemoryBlocks","GithubCorner_default","octoColor","bannerColor","href","Boolean","location","hostname","match","createBlocks","audio","initialState","fromJS","memoryBlocksReducer","length","undefined","action","set","updatedAnswer","answerVerify","updatedLevel","updatedSideLength","updateIn","event_category","event_label","store","enhancers","applyMiddleware","apply","composeEnhancers","compose","createStore","combineReducers","memoryBlocks","configureStore","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e18b8d43.chunk.js","sourcesContent":["export const KEY_REDUCER = 'MEMORY_BLOCKS';\nexport const SET_INIT = `${KEY_REDUCER}/SET_INIT`;\nexport const UPDATE_ANSWER = `${KEY_REDUCER}/UPDATE_ANSWER`;\nexport const UPDATE_IS_COMPLETE = `${KEY_REDUCER}/UPDATE_IS_COMPLETE`;\nexport const UPDATE_IS_CORRECT = `${KEY_REDUCER}/UPDATE_IS_CORRECT`;\n\nexport const SET_RESTART_GAME = `${KEY_REDUCER}/SET_RESTART_GAME`;\nexport const SET_REPLAY_SOUND = `${KEY_REDUCER}/SET_REPLAY_SOUND`;\nexport const SET_IS_PLAYING = `${KEY_REDUCER}/SET_IS_PLAYING`;\n\nexport const DEFAULT_SIDE_LENGTH = 2;\nexport const MAX_SIDE_LENGTH = 5;\nexport const LEVEL_SET = 4;\n\nexport const DEFAULT_CHANCE = 5;\n\nexport const SHADOW_WIDTH = 50;\n\nexport const GAME_WRAPPER_SIZE = 600;\nexport const DEFAULT_LEVEL = 1;\nexport const SOUND_EFFECT = {\n    correct: 'correct',\n    wrong: 'wrong',\n};\n\nexport const BLOCK_COLORS = [\n    '#ff5353',\n    '#ffc429',\n    '#5980c1',\n    '#fbe9b7',\n    '#FF9F1C',\n    '#b2ff59',\n    '#69f0ae',\n    '#ffff00',\n    '#b2dfdb',\n    '#ff6e40',\n    '#00E5FF',\n    '#e0e0e0',\n    '#f06292',\n    '#ba68c8',\n    '#8c9eff',\n    '#8BC34A',\n    '#E91E63',\n    '#FFE2D1',\n    '#FFDF64',\n    '#00c853',\n    '#DCABDF',\n    '#78FFD6',\n    '#C8553D',\n    '#3185FC',\n    '#FFFFFF',\n];\n\nexport const PIANO_SOUNDS_URL = 'https://awiclass.monoame.com/pianosound/set/';\nexport const PIANO_SOUNDS = [\n    1,\n    1.5,\n    2,\n    2.5,\n    3,\n    4,\n    4.5,\n    5,\n    5.5,\n    6,\n    6.5,\n    7,\n    8,\n    8.5,\n    9,\n    9.5,\n    10,\n    11,\n    11.5,\n    12,\n    12.5,\n    13,\n    13.5,\n    14,\n    15,\n];\n\nexport const CHORD = {\n    correct: [1, 3, 5, 8].map((note) => new Audio(PIANO_SOUNDS_URL + note + '.wav')),\n    wrong: [2, 4, 5.5, 7].map((note) => new Audio(PIANO_SOUNDS_URL + note + '.wav')),\n};\n","import styled from 'styled-components';\nimport {\n    GAME_WRAPPER_SIZE,\n    SHADOW_WIDTH,\n} from './constants';\n\nconst buttonMixin = () => `\n    width: 100px;\n    height: 40px;\n    background: #000000b3;\n    border: 2px solid white;\n    color: white;\n    border-radius: 40px;\n    font-size: 1em;\n    font-weight: 700;\n    letter-spacing: 1px;\n    cursor: pointer;\n    outline: none;\n    transition: all 0.8s;\n    &:hover {\n        color: black;\n        background: white;\n        opacity: 1;\n    }\n`;\n\nexport const StyledMemoryBlocks = styled.div`\n    .memory-blocks__title-wrapper {\n        color: white;\n        font-size: 2em;\n        font-weight: 900;\n        text-align: right;\n        letter-spacing: 1px;\n    }\n    .memory-blocks__blocks-wrapper {\n        position: relative;\n        width: ${GAME_WRAPPER_SIZE}px;\n        height: ${GAME_WRAPPER_SIZE}px;\n        @media only screen and (max-width: 600px) {\n            width: calc(100vw - ${SHADOW_WIDTH}px);\n            height: calc(100vw - ${SHADOW_WIDTH}px);\n        }\n        display: grid;\n        ${(props) => {\n            const sideLength = props.sideLength;\n            return `\n                    grid-template-columns: repeat(${sideLength}, 1fr);\n                    grid-template-rows: repeat(${sideLength}, 1fr);\n                    grid-gap: ${40 / sideLength}px;\n                `;\n        }}\n    }\n    .memory-blocks__info {\n        color: #FF5353;\n        font-size: 1.2em;\n        font-weight: 900;\n        margin: 20px 0px 10px 0px;\n    }\n    .memory-blocks__panel {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n    .memory-blocks__start-btn {\n        ${buttonMixin()}\n        width: 150px;\n        height: 60px;\n        font-size: 2em;\n    }\n    .memory-blocks__group-btn-wrapper {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 10px;\n        .memory-blocks__hint-btn {\n            margin-right: 10px;\n            ${buttonMixin()}\n        }\n        .memory-blocks__restart-btn {\n            ${buttonMixin()}\n        }\n        .fa-music {\n            color: #3185FC;\n        }\n    }\n`;\n","import styled, { keyframes } from 'styled-components';\nimport {\n    BLOCK_COLORS,\n    SHADOW_WIDTH,\n} from 'containers/MemoryBlocks/constants';\n\nconst breathShadow = props => keyframes`\n    0% {\n        box-shadow: none;\n    }\n    100% {\n        box-shadow: 0px 0px ${SHADOW_WIDTH}px 5px ${BLOCK_COLORS[props.blockId] + '80'};\n    }\n`;\n\nexport const StyledBlock = styled.div`\n    .block__block-item {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 100%;\n        height: 100%;\n        ${(props) => {\n            const id = props.blockId;\n            const sideLength = props.sideLength;\n            return `\n                border: ${6 / sideLength}px solid ${BLOCK_COLORS[id] + '80'};\n            `;\n        }}\n        cursor: pointer;\n        transition: 0.5s;\n        background-color: transparent;\n        animation: ${breathShadow} 1.5s infinite alternate-reverse;\n        animation-delay: ${(props) => -2 * Math.random(props.blockId)}s;\n        &:hover {\n            ${(props) => {\n                const id = props.blockId;\n                return `\n                    background: ${BLOCK_COLORS[id] + '4d'};\n                `\n            }}\n        }\n        &:active {\n            ${(props) => {\n                const id = props.blockId;\n                return `\n                    animation: none;\n                    background: ${BLOCK_COLORS[id]};\n                    box-shadow: 0px 0px ${SHADOW_WIDTH}px 7px ${BLOCK_COLORS[id]};\n                `;\n            }}\n            transition: 0s;\n        }\n    }\n    .block__block-item-active {\n        ${(props) => {\n            const id = props.blockId;\n            return `\n                animation: none;\n                background: ${BLOCK_COLORS[id]};\n                box-shadow: 0px 0px ${SHADOW_WIDTH}px 7px ${BLOCK_COLORS[id]};\n            `;\n        }}\n        transition: 0s;\n    }\n    .block__block-item-active-wrong {\n        ${(props) => {\n            const RED = BLOCK_COLORS[0];\n            return `\n                animation: none;\n                background: ${RED};\n                box-shadow: 0px 0px ${SHADOW_WIDTH}px 7px ${RED};\n            `;\n        }}\n        transition: 0s;\n    }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledBlock } from './Styled';\n\nclass Block extends React.PureComponent {\n    static propTypes = {\n        blockId: PropTypes.number,\n        sideLength: PropTypes.number,\n        handleOnClick: PropTypes.func,\n    }\n    static defaultProps = {\n        blockId: 0,\n        sideLength: 0,\n        handleOnClick: () => { },\n    }\n    render() {\n        const {\n            blockId,\n            sideLength,\n            handleOnClick,\n        } = this.props;\n        return (\n            <StyledBlock\n                blockId={blockId}\n                sideLength={sideLength}\n            >\n                <div\n                    id={`block-${blockId}`}\n                    data-id={blockId}\n                    className=\"block__block-item\"\n                    onClick={handleOnClick}\n                />\n            </StyledBlock>\n        );\n    }\n}\n\nexport default Block;\n","import styled from 'styled-components';\nimport {\n    GAME_WRAPPER_SIZE,\n    SHADOW_WIDTH,\n} from 'containers/MemoryBlocks/constants';\n\nconst size = 10;\nexport const StyledProgress = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    list-style-type: none;\n    margin-top: 20px;\n    position: relative;\n    width: ${GAME_WRAPPER_SIZE}px;\n    @media only screen and (max-width: 600px) {\n        width: calc(100vw - ${SHADOW_WIDTH}px);\n    }\n    .progress__node {\n        width: ${size}px;\n        height: ${size}px;\n        border-radius: 100%;\n        margin: 5px 5px;\n        background: white;\n        opacity: 0.3;\n    }\n    .progress__node-active {\n        opacity: 1;\n        box-shadow: 0px 0px 15px 2px white;\n    }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\nimport { StyledProgress } from './Styled';\n\nconst Progress = ({ levelData, answer }) => {\n    const progressNode = Array.from(Array(levelData.size), (value, index) => ({\n        id: index,\n        className: (index < answer.size) ? 'progress__node progress__node-active' : 'progress__node',\n    }));\n    return (\n        <StyledProgress>\n            {\n                progressNode.map((node) => (\n                    <div\n                        key={node.id}\n                        className={node.className}\n                    />\n                ))\n            }\n        </StyledProgress>\n    );\n};\n\nProgress.propTypes = {\n    levelData: PropTypes.instanceOf(List),\n    answer: PropTypes.instanceOf(List),\n};\nProgress.defaultProps = {\n    levelData: List(),\n    answer: List(),\n};\n\nexport default Progress;\n","import { createSelector } from 'reselect';\n\nconst selectMemoryBlocks = state => state.get('memoryBlocks');\n\nconst selectBlocks = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('blocks'),\n    );\n\nconst selectSideLength = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('sideLength'),\n    );\n\nconst selectLevelData = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('levelData'),\n    );\n\nconst selectAnswer = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('answer'),\n    );\n\nconst selectIsGameStart = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('isGameStart'),\n    );\n\nconst selectLevel = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('level'),\n    );\n\nconst selectIsComplete = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('isComplete'),\n    );\n\nconst selectIsCorrect = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('isCorrect'),\n    );\n\nconst selectIsPlaying = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('isPlaying'),\n    );\n\nconst selectChance = () =>\n    createSelector(selectMemoryBlocks, tictactoeState =>\n        tictactoeState.get('chance'),\n    );\n\nexport {\n    selectBlocks,\n    selectSideLength,\n    selectLevelData,\n    selectAnswer,\n    selectIsGameStart,\n    selectLevel,\n    selectIsComplete,\n    selectIsCorrect,\n    selectIsPlaying,\n    selectChance,\n};\n","import {\n    PIANO_SOUNDS_URL,\n    CHORD,\n} from 'containers/MemoryBlocks/constants';\n\nexport const getAudioObject = (note) => new Audio(PIANO_SOUNDS_URL + note + '.wav');\n\nexport const playSoundEffect = (type) => {\n    const soundSet = CHORD[type];\n    soundSet.forEach((audioObject) => {\n        audioObject.currentTime = 0;\n        audioObject.play();\n    });\n};\n\nexport const playLevelSound = (levelData, blocks) => {\n    levelData.forEach((blockId, index) => {\n        setTimeout(() => {\n            const audioObject = blocks.getIn([blockId.toString(), 'audio'])();\n            audioObject.currentTime = 0;\n            audioObject.play();\n            flashBlock(blockId, true);\n        }, 500 * index);\n    });\n    return levelData.size * 500;\n};\n\nexport const flashBlock = (id, isCorrect) => {\n    const blockActiveColor = isCorrect ? 'block__block-item-active' : 'block__block-item-active-wrong';\n    document.getElementById(`block-${id}`).classList.add(blockActiveColor);\n    setTimeout(() => {\n        document.getElementById(`block-${id}`).classList.remove(blockActiveColor);\n    }, 200);\n};\n\nexport const flashAllBlocks = (blocks, isCorrect) => {\n    blocks.forEach((block) => {\n        flashBlock(block.get('id'), isCorrect);\n    });\n};\n\nexport const generateLevelData = (level, sideLength) => {\n    const maxNote = sideLength * sideLength;\n    const numOfNote = level + sideLength;\n    const levelData = Array.from(Array(numOfNote), (value, index) => Math.floor(Math.random() * maxNote));\n    return levelData;\n};\n\nexport const clearAllTimeouts = () => {\n    // clear \"all\" timeouts\n    const biggestTimeoutId = window.setTimeout(function () { }, 1);\n    for (let i = 1; i <= biggestTimeoutId; i++) {\n        clearTimeout(i);\n    }\n};\n","let dataLayer = window.dataLayer || [];\nfunction gtag() {\n    dataLayer.push(arguments);\n}\ngtag('js', new Date());\ngtag('config', 'UA-105071529-7');\n\nexport default gtag;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'immutable';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { StyledMemoryBlocks } from 'containers/MemoryBlocks/Styled';\nimport Block from './components/Block';\nimport Progress from './components/Progress';\n\nimport {\n    selectBlocks,\n    selectSideLength,\n    selectLevelData,\n    selectIsGameStart,\n    selectLevel,\n    selectIsComplete,\n    selectIsCorrect,\n    selectAnswer,\n    selectChance,\n    selectIsPlaying,\n} from './selectors';\nimport {\n    setInit,\n    updateAnswer,\n    updateIsComplete,\n    updateIsCorrect,\n    setGameRestart,\n    setReplaySound,\n    setIsPlaying,\n} from './actions';\nimport {\n    SOUND_EFFECT,\n    DEFAULT_LEVEL,\n} from './constants';\nimport {\n    playSoundEffect,\n    playLevelSound,\n    flashAllBlocks,\n    clearAllTimeouts,\n} from './utils';\nimport gtag from '../../utils/tracking';\n\nclass MemoryBlocks extends Component {\n    static propTypes = {\n        blocks: PropTypes.instanceOf(List),\n        sideLength: PropTypes.number,\n        isGameStart: PropTypes.bool,\n        level: PropTypes.number,\n        chance: PropTypes.number,\n        isComplete: PropTypes.bool,\n        isCorrect: PropTypes.bool,\n        handleSetInit: PropTypes.func,\n        handleUpdateAnswer: PropTypes.func,\n        handleSetGameRestart: PropTypes.func,\n        handleSetReplaySound: PropTypes.func,\n    }\n    static defaultProps = {\n        blocks: List(),\n        sideLength: 0,\n        isGameStart: false,\n        level: DEFAULT_LEVEL,\n        chance: 0,\n        isComplete: false,\n        isCorrect: true,\n        handleSetInit: () => { },\n        handleUpdateAnswer: () => { },\n        handleSetGameRestart: () => { },\n        handleSetReplaySound: () => { },\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const {\n            blocks,\n            sideLength,\n            levelData,\n            chance,\n            isComplete,\n            isCorrect,\n            isPlaying,\n            handleUpdateIsComplete,\n            handleUpdateIsCorrect,\n            handleSetGameRestart,\n            handleSetIsPlaying,\n        } = this.props;\n        // game start 要播放一次\n        // 要求repeat 要播放一次\n        // 進到下一關，要播放一次\n\n        if (chance < 0) {\n            clearAllTimeouts();\n            handleSetGameRestart();\n            return;\n        }\n        if (isPlaying) {\n            return;\n        }\n        if (isComplete) {\n            handleSetIsPlaying(true);\n            handleUpdateIsComplete(false);\n            setTimeout(() => {\n                playSoundEffect(SOUND_EFFECT.correct);\n                flashAllBlocks(blocks, isCorrect);\n            }, 500);\n            setTimeout(() => {\n                const finishedTime = playLevelSound(levelData, blocks);\n                setTimeout(() => {\n                    handleSetIsPlaying(false);\n                }, finishedTime);\n            }, 3000);\n        } else if (!isCorrect) {\n            handleSetIsPlaying(true);\n            clearAllTimeouts();\n            handleUpdateIsCorrect(true);\n            setTimeout(() => {\n                playSoundEffect(SOUND_EFFECT.wrong);\n                flashAllBlocks(blocks, isCorrect);\n            }, 500);\n            setTimeout(() => {\n                const finishedTime = playLevelSound(levelData, blocks);\n                setTimeout(() => {\n                    handleSetIsPlaying(false);\n                }, finishedTime);\n            }, 3000);\n        }\n    }\n    handleOnBlockClick = (event) => {\n        const {\n            isPlaying,\n            blocks,\n            handleUpdateAnswer,\n        } = this.props;\n        if (isPlaying) {\n            return;\n        }\n        const blockId = event.target.getAttribute('data-id');\n        const audioObject = blocks.getIn([blockId, 'audio'])();\n        handleUpdateAnswer(parseInt(blockId, 10));\n        audioObject.currentTime = 0;\n        audioObject.play();\n        gtag('event', 'Block Click');\n    }\n    handleOnGameStart = () => {\n        const {\n            levelData,\n            blocks,\n            isCorrect,\n            handleSetInit,\n            handleSetIsPlaying,\n        } = this.props;\n        handleSetInit();\n        handleSetIsPlaying(true);\n        playSoundEffect(SOUND_EFFECT.correct);\n        flashAllBlocks(blocks, isCorrect);\n        setTimeout(() => {\n            const finishedTime = playLevelSound(levelData, blocks);\n            setTimeout(() => {\n                handleSetIsPlaying(false);\n            }, finishedTime);\n        }, 2000);\n        gtag('event', 'Start');\n    }\n    handleOnGameRestart = () => {\n        const {\n            handleSetGameRestart,\n        } = this.props;\n        clearAllTimeouts();\n        handleSetGameRestart();\n        gtag('event', 'Restart');\n    }\n    handleOnReplaySound = () => {\n        const {\n            levelData,\n            blocks,\n            chance,\n            handleSetReplaySound,\n            handleSetIsPlaying,\n        } = this.props;\n        if (!chance) {\n            return;\n        }\n        clearAllTimeouts();\n        handleSetIsPlaying(true);\n        handleSetReplaySound();\n        setTimeout(() => {\n            const finishedTime = playLevelSound(levelData, blocks);\n            setTimeout(() => {\n                handleSetIsPlaying(false);\n            }, finishedTime);\n        }, 500);\n        gtag('event', 'Replay');\n    }\n    render() {\n        const {\n            levelData,\n            answer,\n            isGameStart,\n            blocks,\n            sideLength,\n            level,\n            chance,\n        } = this.props;\n        return (\n            <StyledMemoryBlocks sideLength={sideLength}>\n                <div className=\"memory-blocks__title-wrapper\">\n                    <div>Memory</div>\n                    <div>Blocks</div>\n                </div>\n                <div className=\"memory-blocks__info\">Level {level}</div>\n                <div className=\"memory-blocks__blocks-wrapper\">\n                    {\n                        blocks.map((block) => (\n                            <Block\n                                key={block.get('id')}\n                                blockId={block.get('id')}\n                                sideLength={sideLength}\n                                handleOnClick={this.handleOnBlockClick}\n                            />\n                        ))\n                    }\n                    {\n                        !isGameStart &&\n                        <div className=\"memory-blocks__panel\">\n                            <button\n                                className=\"memory-blocks__start-btn\"\n                                onClick={this.handleOnGameStart}\n                            >\n                                Start\n                            </button>\n                        </div>\n                    }\n                </div>\n                <Progress\n                    levelData={levelData}\n                    answer={answer}\n                />\n                {\n                    isGameStart &&\n                    <div className=\"memory-blocks__group-btn-wrapper\">\n                        <button className=\"memory-blocks__hint-btn memory-blocks__font-music\" onClick={this.handleOnReplaySound}>\n                            <i className=\"fas fa-music memory-blocks__font-music\" />\n                            <span> x {chance}</span>\n                        </button>\n                        <button className=\"memory-blocks__restart-btn\" onClick={this.handleOnGameRestart}>Restart</button>\n                    </div>\n                }\n            </StyledMemoryBlocks>\n        );\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    blocks: selectBlocks(),\n    sideLength: selectSideLength(),\n    levelData: selectLevelData(),\n    answer: selectAnswer(),\n    isGameStart: selectIsGameStart(),\n    level: selectLevel(),\n    isComplete: selectIsComplete(),\n    isCorrect: selectIsCorrect(),\n    isPlaying: selectIsPlaying(),\n    chance: selectChance(),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleSetInit: () => dispatch(setInit()),\n    handleSetGameRestart: () => dispatch(setGameRestart()),\n    handleSetReplaySound: () => dispatch(setReplaySound()),\n    handleUpdateAnswer: (note) => dispatch(updateAnswer(note)),\n    handleUpdateIsComplete: (isComplete) => dispatch(updateIsComplete(isComplete)),\n    handleUpdateIsCorrect: (isCorrect) => dispatch(updateIsCorrect(isCorrect)),\n    handleSetIsPlaying: (isPlaying) => dispatch(setIsPlaying(isPlaying)),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(MemoryBlocks);\n","import {\n    SET_INIT,\n    UPDATE_ANSWER,\n    UPDATE_IS_COMPLETE,\n    UPDATE_IS_CORRECT,\n    SET_RESTART_GAME,\n    SET_REPLAY_SOUND,\n    SET_IS_PLAYING,\n} from './constants';\n\nexport const setInit = () => ({\n    type: SET_INIT,\n});\n\nexport const updateAnswer = (note) => ({\n    type: UPDATE_ANSWER,\n    payload: note,\n});\n\nexport const updateIsComplete = (isComplete) => ({\n    type: UPDATE_IS_COMPLETE,\n    payload: isComplete,\n});\n\nexport const updateIsCorrect = (isCorrect) => ({\n    type: UPDATE_IS_CORRECT,\n    payload: isCorrect,\n});\n\nexport const setGameRestart = () => ({\n    type: SET_RESTART_GAME,\n});\n\nexport const setReplaySound = () => ({\n    type: SET_REPLAY_SOUND,\n});\n\nexport const setIsPlaying = (isPlaying) => ({\n    type: SET_IS_PLAYING,\n    payload: isPlaying,\n});\n","import React, { Component } from 'react';\nimport MemoryBlocks from 'containers/MemoryBlocks';\nimport GithubCorner from 'react-github-corner';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MemoryBlocks />\n        <GithubCorner\n          size={60}\n          octoColor={'black'}\n          bannerColor={'white'}\n          href=\"https://github.com/TimingJL/Memory-Blocks\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { fromJS, List } from 'immutable';\nimport {\n    DEFAULT_SIDE_LENGTH,\n    MAX_SIDE_LENGTH,\n    DEFAULT_LEVEL,\n    LEVEL_SET,\n    DEFAULT_CHANCE,\n\n    PIANO_SOUNDS,\n\n    SET_INIT,\n    UPDATE_ANSWER,\n    UPDATE_IS_COMPLETE,\n    UPDATE_IS_CORRECT,\n    SET_RESTART_GAME,\n    SET_REPLAY_SOUND,\n    SET_IS_PLAYING,\n} from 'containers/MemoryBlocks/constants';\n\nimport {\n    getAudioObject,\n    generateLevelData,\n} from 'containers/MemoryBlocks/utils';\nimport gtag from '../../utils/tracking';\n\nconst createBlocks = sideLength => Array.from(Array(sideLength * sideLength), (value, index) => ({\n    id: index,\n    audio: () => getAudioObject(PIANO_SOUNDS[index]),\n}));\n\nconst initialState = fromJS({\n    blocks: createBlocks(DEFAULT_SIDE_LENGTH),\n    sideLength: DEFAULT_SIDE_LENGTH,\n    level: DEFAULT_LEVEL,\n    levelData: generateLevelData(DEFAULT_LEVEL, DEFAULT_SIDE_LENGTH),\n    answer: [],\n    isGameStart: false,\n    isCorrect: true,\n    isComplete: false,\n    isPlaying: false,\n    chance: DEFAULT_CHANCE,\n});\n\nfunction memoryBlocksReducer(state = initialState, action) {\n    switch (action.type) {\n        case SET_INIT: {\n            return state.set('isGameStart', true);\n        }\n        case SET_RESTART_GAME: {\n            return initialState\n                .set('isGameStart', false)\n                .set('levelData', fromJS(generateLevelData(DEFAULT_LEVEL, DEFAULT_SIDE_LENGTH)));\n        }\n        case UPDATE_ANSWER: {\n            const updatedAnswer = state.get('answer').push(action.payload);\n            const levelData = state.get('levelData');\n            const level = state.get('level');\n            const sideLength = state.get('sideLength');\n            const isCorrect = answerVerify(updatedAnswer, levelData);\n            if (isCorrect && (updatedAnswer.size === levelData.size)) {\n                // if correct and complete\n                const updatedLevel = level + 1;\n                const updatedSideLength = (sideLength + 1) > MAX_SIDE_LENGTH ? MAX_SIDE_LENGTH : (sideLength + 1);\n                return state\n                    .set('isComplete', true)\n                    .set('level', updatedLevel)\n                    .set('levelData', fromJS(generateLevelData(updatedLevel, sideLength)))\n                    .set('answer', List())\n                    .updateIn(['sideLength'], (sideLength) => {\n                        if (updatedLevel % LEVEL_SET === 0) {\n                            gtag('event', 'sideLength', {\n                                'event_category': 'sideLength',\n                                'event_label': updatedSideLength,\n                            });\n                            return updatedSideLength;\n                        }\n                        return sideLength;\n                    })\n                    .updateIn(['blocks'], (blocks) => {\n                        if (updatedLevel % LEVEL_SET === 0) {\n                            return fromJS(createBlocks(updatedSideLength));\n                        }\n                        return blocks;\n                    })\n                    .updateIn(['chance'], (chance) => {\n                        return chance + 1;\n                    });\n            }\n            if (isCorrect) {\n                // if correct\n                gtag('event', 'Correct');\n                return state.set('answer', updatedAnswer);\n            } else {\n                // if wrong\n                gtag('event', 'Wrong');\n                return state\n                    .set('isCorrect', false)\n                    .set('answer', List())\n                    .updateIn(['chance'], (chance) => chance - 1);\n            }\n        }\n        case UPDATE_IS_COMPLETE : {\n            return state.set('isComplete', action.payload);\n        }\n        case UPDATE_IS_CORRECT: {\n            return state.set('isCorrect', action.payload);\n        }\n        case SET_REPLAY_SOUND: {\n            return state\n                .updateIn(['chance'], (chance) => chance - 1);\n        }\n        case SET_IS_PLAYING: {\n            return state.set('isPlaying', action.payload);\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport default memoryBlocksReducer;\n\nconst answerVerify = (answer, levelData) => {\n    let isCorrect;\n    answer.forEach((note, index) => {\n        if (note === levelData.get(index)) {\n            isCorrect = true;\n        } else {\n            isCorrect = false;\n        }\n    });\n    return isCorrect;\n};\n","import configureStore from './configureStore';\n\nconst store = configureStore();\n\nexport default store;\n","import { fromJS } from 'immutable';\nimport {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\nimport createReducer from 'store/reducers';\n\nexport default function configureStore(initialState = {}, history) {\n    // Create the store with two middlewares\n    // 1. sagaMiddleware: Makes redux-sagas work\n    // 2. routerMiddleware: Syncs the location/URL path to the state\n    const middlewares = [];\n\n    const enhancers = [applyMiddleware(...middlewares)];\n\n    // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n    /* eslint-disable no-underscore-dangle */\n    const composeEnhancers =\n        process.env.NODE_ENV !== 'production' &&\n            typeof window === 'object' &&\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n            ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n                // TODO Try to remove when `react-router-redux` is out of beta, LOCATION_CHANGE should not be fired more than once after hot reloading\n                // Prevent recomputing reducers for `replaceReducer`\n                shouldHotReload: false,\n            })\n            : compose;\n\n    const store = createStore(\n        createReducer(),\n        fromJS(initialState),\n        composeEnhancers(...enhancers)\n    );\n\n    return store;\n}\n","import { combineReducers } from 'redux-immutable';\nimport memoryBlocksReducer from 'containers/MemoryBlocks/reducer';\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(injectedReducers) {\n    return combineReducers({\n        memoryBlocks: memoryBlocksReducer,\n    });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from 'store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}